#  ███████╗███████╗██╗  ██╗██████╗  ██████╗
#  ╚══███╔╝██╔════╝██║  ██║██╔══██╗██╔════╝
#    ███╔╝ ███████╗███████║██████╔╝██║     
#   ███╔╝  ╚════██║██╔══██║██╔══██╗██║     
#  ███████╗███████║██║  ██║██║  ██║╚██████╗
#  ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝
#
#  Z shell run commands configuration
#  https://zsh.sourceforge.io/

#-------------------------------------------------------------------------------
#--                  Zshrc Prerequisites
#-------------------------------------------------------------------------------
# Mac Only
# Neovim + Git + Terminal (nerd font configured/installed) + NPM + PNPM + Yarn


#-------------------------------------------------------------------------------
#--         Powerlevel10k Instant Prompt (disabled for fastfetch)
#-------------------------------------------------------------------------------
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

#-------------------------------------------------------------------------------
#--                      Zsh Configuration
#-------------------------------------------------------------------------------
export ZSH_COMPDUMP="$ZDOTDIR/.zcompdump"

# Set up function path to include functions directory
fpath=("$ZDOTDIR/functions" $fpath)

# Redirect zsh_sessions to the new location - used by Terminal.app on macOS
export SHELL_SESSIONS_DIR="$ZDOTDIR/zsh_sessions"


#-------------------------------------------------------------------------------
#--                      User Settings
#-------------------------------------------------------------------------------
if [ -f "$HOME/.zsh_gnohj_env" ]; then
  source "$HOME/.zsh_gnohj_env"
fi

if [ -f "$HOME/.zsh_radioctl_cmds" ]; then
  source "$HOME/.zsh_radioctl_cmds"
fi


#-------------------------------------------------------------------------------
#--                           Zinit
#-------------------------------------------------------------------------------

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit (optimized lady loading plugin manager), if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"



#-------------------------------------------------------------------------------
#--                 Zinit - Prompt
#-------------------------------------------------------------------------------


# Load Powerlevel10k (disabled for starship)
# export PROMPT_NAME="powerlevel10k"
# zinit ice depth=1; zinit light romkatv/powerlevel10k

# Load Custom Segments for starship prompt before starship get's evaled
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    radio_ctl_prompt=$(get_rc)
    if [[ $radio_ctl_prompt != 1 ]]; then
      export STARSHIP_CONFIG=~/.config/starship/starship-radioctl.toml
      export RADIO_CTL="$(get_rc)"
    fi
else
    export STARSHIP_CONFIG=~/.config/starship/starship.toml
    unset RADIO_CTL
fi

# brew init starship - https://github.com/starship/starship/issues/3418
if [[ "${widgets[zle-keymap-select]#user:}" == "starship_zle-keymap-select" || \
      "${widgets[zle-keymap-select]#user:}" == "starship_zle-keymap-select-wrapped" ]]; then
    zle -N zle-keymap-select "";
fi


# Load starship
export PROMPT_NAME="starship"
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit load starship/starship


#-------------------------------------------------------------------------------
#--                 Zinit - Plugins
#-------------------------------------------------------------------------------

# zinit light zsh-users/zsh-completions - changes text green/red depending on valid command
zinit light zsh-users/zsh-syntax-highlighting

# loads extra completion definitions that aren't officially part of zsh
zinit load zsh-users/zsh-completions

# shows a single suggestions (gray text after your cursor) based on latest cmd history
# can accept it with right arrow.. this plugin has no back suggestions..
# if you want to go back to (recento to latest comand history) just toggle <C-p> previous or <C-n> next
zinit light zsh-users/zsh-autosuggestions

# 📎 ZSH plugin that reminds you to use existing aliases for commands you just typed
zinit load MichaelAquilina/zsh-you-should-use

# 🔖 Quickly navigate your work path!
# zinit load wfxr/formarks

# Load zsh-vi-mode via Zinit with proper configuration
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode

# 🚀 Better vim bindings for Zsh!
# https://github.com/jeffreytse/zsh-vi-mode
ZVM_VI_ESCAPE_BINDKEY=jk
ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_HIGHLIGHT_BACKGROUND=#275378
ZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE

# INFO: vicmd is short for normal mode
# INFO: viins is short for insert mode
function zvm_after_lazy_keybindings() {
  # zvm_bindkey vicmd 'gh' beginning-of-line
  # zvm_bindkey vicmd 'gl' end-of-line

  # Restore autosuggestions bindings
  bindkey '^F' autosuggest-accept
  bindkey '^E' autosuggest-forward-word
}

function zvm_after_init() {
  # Source .fzf.zsh so that ctrl+r works
  [ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh
}


#-------------------------------------------------------------------------------
#--                 Zinit -  Snippets
#-------------------------------------------------------------------------------

# adds git aliases, g=git, gst=git status, etc.
zinit snippet OMZ::plugins/git/git.plugin.zsh 
zinit snippet OMZL::git.zsh

# mostly just cli completions
zinit snippet OMZP::aws
zinit snippet OMZP::chezmoi
zinit snippet OMZP::command-not-found
zinit snippet OMZP::docker
zinit snippet OMZP::golang

#-------------------------------------------------------------------------------
#--        Zinit -  Load Completions whenever zshell starts
#-------------------------------------------------------------------------------


# Load completions whenever zshell starts
# initializes entire zsh completion system, process all registered completion fns, builds completion cache
autoload -Uz compinit && compinit -d $ZSH_COMPDUMP

# Call this after zsh completion system loads.
if [[ -n "$(command -v fzf)" ]]; then
  # Replace zsh's default completion selection menu with fzf!
  zinit load Aloxaf/fzf-tab
fi

# Define the function with the correct name
function _history_substring_search_config() {
  bindkey '^P' history-substring-search-up # ctrl + p
  bindkey '^N' history-substring-search-down # ctrl + n
}

# Set ice modifiers BEFORE loading the plugin
zinit ice wait lucid atload'_history_substring_search_config'
zinit load zsh-users/zsh-history-substring-search


#-------------------------------------------------------------------------------
#--        Zinit -  Replay all Cached Completions
#-------------------------------------------------------------------------------

zinit cdreplay -q


#-------------------------------------------------------------------------------
#                  Keybindings
#-------------------------------------------------------------------------------

# ELIF Bindings
# accept single auto suggestion (gray text); use right arrow to accept
# history substring search - ctrl + p/n; use right arrow to accept
# autocomplete menu - tab; use arrows to nav; use tab/enter to accept

# When IN menu, up/down navigate menu items for autocomplete; otherwise always use history substring search
# bindkey -M menuselect '^[[A' up-line-or-history    # Up arrow
# bindkey -M menuselect '^[[B' down-line-or-history  # Down arrow

# Press tab to enter menu in auto-complete dropdown, then use arrows to navigate,press enter or tab to select
# bindkey '^I' menu-select


# Fix key bindings for zsh-autocomplete to prevent conflicts
# bindkey -M menuselect "^[[A" up-line-or-history    # Up arrow
# bindkey -M menuselect "^[[B" down-line-or-history  # Down arrow
# bindkey -M menuselect "^[OA" up-line-or-history    # Up arrow (alternate code)
# bindkey -M menuselect "^[OB" down-line-or-history  # Down arrow (alternate code)
# bindkey -M menuselect "^[[D" backward-char         # Left arrow
# bindkey -M menuselect "^[[C" forward-char          # Right arrow
# bindkey -M menuselect "^[OD" backward-char         # Left arrow (alternate code)
# bindkey -M menuselect "^[OC" forward-char          # Right arrow (alternate code)


#-------------------------------------------------------------------------------
#                  Completion Styling
#-------------------------------------------------------------------------------

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # INFO: cd desktop versus cd Desktop
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:*' fzf-flags --color=bg+:#214969,gutter:-1,border:#04d1f9,fg:#44FFb1
zstyle ':fzf-tab:complete:*' fzf-preview 'eza -1 --color=always $realpath'


#-------------------------------------------------------------------------------
#                  History
#-------------------------------------------------------------------------------

HISTSIZE=10000
# Updated history file location
HISTFILE=$ZDOTDIR/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase # erase all dupes in history file
setopt appendhistory
setopt sharehistory
# setopt hist_ignore_space - i want sensitive args to be persisted
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups


#-------------------------------------------------------------------------------
#                  Aliases
#-------------------------------------------------------------------------------
# Blacklist for `you-should-use` plugin
export YSU_IGNORED_ALIASES=("vi" "vim")

# Zinit Status
alias zstatus='zinit status'

# Obisidian
alias oo='cd $HOME/Obsidian/second-brain'
# Obsidian review
alias or='nvim $HOME/Obsidian/second-brain/0-Inbox/*.md'

# Chezmoi - TODO: add chezmoi check/download (brew)
alias cz='chezmoi'


# Fzf Shortcuts
alias fzn='nvim $(fzf -m --preview="bat --color=always {}")'

# NeoVim Shorcuts
ESLINT_USE_FLAT_CONFIG=false
alias n="ESLINT_USE_FLAT_CONFIG=false nvim"
alias vi=nvim
alias vim=nvim
export EDITOR="ESLINT_USE_FLAT_CONFIG=false nvim"

# Git Shorcuts
alias gamend="g commit --amend --date=now --no-edit"
alias gpom="g pull origin master"
alias gcom="g checkout master"
alias gpod="g pull origin develop"
alias gcod="g checkout develop"
alias gg="lazygit"

# reload zshell - Updated to reflect new location
alias reload="source $ZDOTDIR/.zshrc"

# speedtest - TODO: add speedtest-cli check/download (brew)
alias speed="speedtest"


# Yarn clean
alias yarc='yarn cache clean && rm -rf node_modules dist && yarn install'

# pnpm
alias pn="pnpm"

# clr
alias c='clear'

# bat - TODO: add bat check/download (brew)
alias cat="bat"

# eza for modern ls view - TODO: add eza check/download (brew)
alias ls="eza --icons=always --long --all"

# brew leaves list (installed packages by me)
alias leaves="brew leaves"

# brew outdated list (installed packages by me)
alias outdated="comm -12 <(brew leaves | sort) <(brew outdated --formula | awk '{print \$1}' | sort) | awk '{print \"outdated brew package: \" \$1}'"

#-------------------------------------------------------------------------------
#                  Paths
#-------------------------------------------------------------------------------

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# pnpm
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# add second-brain executables to path - og,on
export PATH="$HOME/_bin:$PATH"


#-------------------------------------------------------------------------------
#                  Script Integrations
#-------------------------------------------------------------------------------

# -----------------------------  Aider - TODO: add Aider check/download (brew)
export AIDER_SUBTREE_ONLY=1

. "$HOME/.local/bin/env"

# -----------------------------  Bun completions - TODO: add bun check/download (brew)
[ -s "/Users/gnohj/.bun/_bun" ] && source "/Users/gnohj/.bun/_bun"


# -----------------------------  Delta (nicer git diff)
if ! command -v delta &> /dev/null; then
    echo "Delta not found. Installing delta..."
    # macOS - install with Homebrew
    if command -v brew &> /dev/null; then
        brew install git-delta
        echo "Delta installed successfully!"
    else
        echo "Homebrew not found. Please install Homebrew first, then run: brew install git-delta"
    fi
fi

# Configure git to use delta if it's installed
if command -v delta &> /dev/null; then
    # Configure delta as git pager if not already configured
    if ! git config --get core.pager | grep -q "delta"; then
        git config --global core.pager "delta"
        git config --global interactive.diffFilter "delta --color-only"
        git config --global delta.navigate true
        git config --global delta.light false
        git config --global delta.side-by-side true
        git config --global delta.line-numbers true
        echo "Git configured to use delta as pager"
    fi
    # Set an alias for viewing git diffs with delta
    alias gdelta='git diff | delta'
fi


#
# -----------------------------  Fastfetch - TODO: add fastfetch check/download (brew)
# INFO: kitty is needed to render custom images via `kitty-icat`; arch -arm64 brew install kitty
# Add a flag to control fastfetch execution
fastfetch


# -----------------------------  Sesh (Tmux Manager)
# Check if sesh is installed (Smart tmux session manager)
if ! command -v sesh &> /dev/null; then
    echo "Sesh not found. Installing sesh..."
    if command -v brew &> /dev/null; then
        brew install sesh
        echo "Sesh installed successfully!"
    else
        echo "Homebrew not found. Please install Homebrew first, then run: brew install joshmedeski/sesh/sesh"
    fi
fi

function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}
zle -N sesh-sessions
# Bind Ctrl+X to the sesh-sessions widget
bindkey -M vicmd '^x' sesh-sessions
bindkey -M viins '^x' sesh-sessions


#-------------------------------------------------------------------------------
#                  Global Helpers
#-------------------------------------------------------------------------------

# Disable Console Do Not Track (specification)
export DO_NOT_TRACK=1

# Force color for cli apps
export FORCE_COLOR=1

# Adds color to fzf- for commands not tab, ex: ctrl + r
export FZF_DEFAULT_OPTS="--color=bg+:#214969,gutter:-1,border:#04d1f9,fg:#44FFb1"

# Global Reload Prompt Fn (updated to use the helper function)
reload_prompt() {
  # set the right pnpm version, fnm eval below will detect right node version
  corepack enable

  # source zshrc file
  reload

  # update radioctl cli
  if typeset -f update_rc >/dev/null 2>&1; then
    update_rc
  fi

  # check for outdated brew packages
  outdated
}

#-------------------------------------------------------------------------------
#                  Power Level 10k Configuration (disabled for starship)
#-------------------------------------------------------------------------------

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f $ZDOTDIR/.p10k.zsh ]] || source $ZDOTDIR/.p10k.zsh


#-------------------------------------------------------------------------------
#                  Eval Integrations
#-------------------------------------------------------------------------------

eval $(thefuck --alias fk) # TODO: add thefuck check/download (brew)
eval "$(direnv hook $SHELL)" # TODO: add direnv check/download (brew)
eval "$(fastly --completion-script-zsh)"  # TODO: add fastly cli check/download (brew)
eval "$(fnm env --use-on-cd --shell zsh)" # TODO: add fnm check/download (brew)
eval "$(fzf --zsh)" # TODO: add fzf check/download (brew)

export _ZO_DATA_DIR="$ZDOTDIR"
eval "$(zoxide init zsh)" # TODO: add zoxide check/download (brew)
