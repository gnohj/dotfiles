#!/usr/bin/env bash

echo "
üîß Run OnChange [Before] Package Install Starting..."

echo "--- CHEZMOI DEBUG ---"
echo "Username:     {{ .chezmoi.username }}"
echo "Host Name:    {{ .chezmoi.hostname }}"
echo "Home Directory: {{ .chezmoi.homeDir }}"
echo "Source Directory: {{ .chezmoi.sourceDir }}"
echo "OS Detected:   {{ .chezmoi.os }}"
echo "Arch Detected: {{ .chezmoi.arch }}"
echo "-------------------------"

{{- if not .newMachine }}
echo "üöß Skipping package installation (newMachine=false)
"
exit 0
{{- end }}

{{- if ne .chezmoi.os "darwin" }}
echo "üöß Skipping package installation (not macOS)
"
exit 0
{{- end }}

#-------------------------------------------------------------------------------
#--                      macOS System Configuration
#-------------------------------------------------------------------------------

echo "Configuring macOS system preferences..."

osascript -e 'tell application "System Preferences" to quit' 2>/dev/null
osascript -e 'tell application "System Settings" to quit' 2>/dev/null

# Create Developer directory
echo "Creating ~/Developer directory..."
mkdir -p "$HOME/Developer"

# Auto-hide Dock and menu bar
echo "Setting up Dock & MenuBar to auto-hide..."
defaults write com.apple.dock autohide -bool true
defaults write NSGlobalDomain _HIHideMenuBar -bool true

# Make Dock appear only after 10-second hover (you can adjust this value)
echo "Setting Dock auto-hide delay..."
defaults write com.apple.dock autohide-delay -float 10.0

# Disable Dock app bouncing
echo "Disabling Dock app bouncing..."
defaults write com.apple.dock no-bouncing -bool true

# Apply Dock changes
killall Dock

# Disable window animations
echo "Disabling window animations..."
defaults write -g NSAutomaticWindowAnimationsEnabled -bool false

# Move windows by dragging any part of the window (by holding ctrl+cmd)
echo "Enabling window dragging from anywhere with Ctrl+Cmd..."
defaults write -g NSWindowShouldDragOnGesture -bool true

# Faster keyboard repeats
echo "Setting faster keyboard repeat rates..."
defaults write -g InitialKeyRepeat -int 15
defaults write -g KeyRepeat -int 1

echo "Configuring Finder settings..."
# Show hidden files in Finder
defaults write com.apple.finder AppleShowAllFiles YES
# Hide Desktop items on desktop
defaults write com.apple.finder CreateDesktop -bool false
killall Finder

# Displays have seperate spaces (for Sketchybar)
defaults write com.apple.spaces "spans-displays" -bool false && killall SystemUIServer

# Reduce motion (enable):
defaults write com.apple.universalaccess reduceMotion -bool true

echo "Set 'Open at login' applications"
# List of applications to add to login items
loginItems=(
  "BetterDisplay"
  "Bitwarden"
  "Flameshot"
  "Ghostty"
  "Google Calendar"
  "Mail"
  "Raycast"
  "Whimsical"
  "Zen"
)

for app in "${loginItems[@]}"; do
  if [ -d "/Applications/$app.app" ]; then
    osascript -e "tell application \"System Events\" to make login item at end with properties {name: \"$app\", path: \"/Applications/$app.app\", hidden:true}"
    echo "‚úÖ  $app added to login items"
  else
    echo "‚ùå  $app not found in /Applications"
  fi
done

echo "  üìù Manual setup required:"
echo "  - System Preferences > Keyboard > Keyboard Shortcuts > Disable additional shortcuts that might conflict"
echo "  - Add global git ignore file to home directory - ~/.gitignore_global"
echo "  - Install apps from App Store"
echo "  - Clone personal/private repos"
echo "  - System Settings ‚Üí General ‚Üí Login Items ‚Üí Allow in the background: AeroSpace, Bjango Pty Ltd, Borders, Caddy, github-auto-push, Homerow.app, iStats Menus, iStats Menus.app, Karabiner Elements Non Privileged App, Karabiner Elements Priviledged Daemon, Logi Options+, Logitech.inc, sketchybar, skhd"
echo "  - Applications to add to Accessibility permissions: AeroSpace, AEServer, BetterDisplay, borders, Ghostty, Homerow, Logi Options+, Raycast, sketchybar, skhd, Visual Studio Code, WezTerm"
echo "  - Applications to add to Automation permissions: AeroSpace, Ghostty, Only Switch, osascript, Raycast, sketchybar, Sublime Text, Visual Studio Code, VLC, WezTerm"
echo "  - Applications to add to Input Monitoring permissions: AeroSpace, Discord, karabiner_grabber, karabiner_observer, Karabiner-EventViewer, Logi Options+"
echo "  - Applications to add to App Management permissions: Raycast"
echo "  - Applications to add to Full Disk Access permissions: Ghostty"
echo "  - Configure KindaVim"

#-------------------------------------------------------------------------------
#--                      Marta File Manager Configuration
#-------------------------------------------------------------------------------
echo "Setting up Marta file manager configuration..."

MARTA_CONFIG_DIR="$HOME/Library/Application Support/org.yanex.marta"
MARTA_CONFIG_FILE="$MARTA_CONFIG_DIR/conf.marco"
DOTFILES_MARTA_CONFIG="$HOME/.config/marta/conf.marco"

mkdir -p "$MARTA_CONFIG_DIR"
ln -s "$DOTFILES_MARTA_CONFIG" "$MARTA_CONFIG_FILE"

#-------------------------------------------------------------------------------
#--                      Spicetify Theme
#-------------------------------------------------------------------------------
if ! command -v spicetify &>/dev/null; then
  echo "‚ùå  spicetify not found"
else
  echo "Installing spicetify themes..."

  # Clone themes repository
  if [ ! -d "/tmp/spicetify-themes" ]; then
    git clone --depth=1 https://github.com/spicetify/spicetify-themes.git /tmp/spicetify-themes
  fi

  # Create themes directory and copy themes
  mkdir -p ~/.config/spicetify/Themes
  cp -r /tmp/spicetify-themes/* ~/.config/spicetify/Themes/

  # Clean up temporary directory
  rm -rf /tmp/spicetify-themes

  # Configure theme
  spicetify config current_theme Dribbblish
  spicetify config color_scheme gruvbox-material-dark
  spicetify backup apply

  echo "‚úÖ  Spicetify theme configured: Dribbblish (gruvbox-material-dark)"

#-------------------------------------------------------------------------------
#--                      GitHub Auto Push Service / Sketchybar Notification
#-------------------------------------------------------------------------------
GITHUB_AUTO_PUSH_PLIST_PATH="$HOME/Library/LaunchAgents/com.gnohj.auto.push.github.plist"
GITHUB_AUTO_PUSH_SCRIPT_PATH="$HOME/.config/zshrc/github-auto-push.sh"
echo "Setting up GitHub Auto Push launch agent..."

cat <<EOF >"$GITHUB_AUTO_PUSH_PLIST_PATH"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.gnohj.auto.push.github</string>
    <key>ProgramArguments</key>
    <array>
        <string>${GITHUB_AUTO_PUSH_SCRIPT_PATH}</string>
    </array>
    <key>StartInterval</key>
    <integer>180</integer>
    <key>StandardOutPath</key>
    <string>/tmp/github-auto-push.out</string>
    <key>StandardErrorPath</key>
    <string>/tmp/github-auto-push.err</string>
</dict>
</plist>
EOF

# Reload the service to apply changes
launchctl unload "$GITHUB_AUTO_PUSH_PLIST_PATH" 2>/dev/null
if launchctl load "$GITHUB_AUTO_PUSH_PLIST_PATH" 2>/dev/null; then
  echo "GitHub Auto Push service loaded/reloaded successfully."
else
  echo "Failed to load GitHub Auto Push service."
fi

#-------------------------------------------------------------------------------
#--                      SKHD (Hotkey Daemon) Configuration -> Aerospace
#-------------------------------------------------------------------------------
SKHD_PLIST_PATH="$HOME/Library/LaunchAgents/com.gnohj.skhd.plist"
SKHD_BREW_PATH="/opt/homebrew/bin/skhd"

# First, check if the skhd command actually exists
if [[ -f "$SKHD_BREW_PATH" ]]; then
  if [ ! -f "$SKHD_PLIST_PATH" ] || ! grep -q "<string>${SKHD_BREW_PATH}</string>" "$SKHD_PLIST_PATH"; then
    echo "skhd launch agent is missing or outdated. Creating/Updating..."
    cat >"$SKHD_PLIST_PATH" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.user.skhd</string>
    <key>ProgramArguments</key>
    <array>
        <string>${SKHD_BREW_PATH}</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>ProcessType</key>
    <string>Interactive</string>
    <key>Nice</key>
    <integer>-5</integer>
</dict>
</plist>
EOF
    # Reload the service to apply any changes
    launchctl unload "$SKHD_PLIST_PATH" 2>/dev/null
    if launchctl load "$SKHD_PLIST_PATH" 2>/dev/null; then
      echo "skhd launch agent loaded/reloaded successfully."
    else
      echo "Failed to load skhd launch agent."
    fi
  else
    # If the file exists and the path is correct, do nothing.
    echo "skhd launch agent is already up-to-date."
  fi
else
  echo "Warning: skhd not found at ${SKHD_BREW_PATH}. Please install it."
fi

#-------------------------------------------------------------------------------
#--                           Kanata Daemon Setup
#-------------------------------------------------------------------------------

echo "üéπ Configuring Kanata keyboard daemon..."

KANATA_BREW_PATH="/opt/homebrew/bin/kanata"
KANATA_DAEMON_PLIST_PATH="/Library/LaunchDaemons/com.kanata.daemon.plist"
KANATA_CONFIG_PATH="$HOME/.config/kanata/macos.kbd"

if [ -f "$KANATA_BREW_PATH" ]; then
  # Create the expected plist content
  EXPECTED_KANATA_PLIST=$(cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.kanata.daemon</string>

    <key>ProgramArguments</key>
    <array>
        <string>${KANATA_BREW_PATH}</string>
        <string>-c</string>
        <string>${KANATA_CONFIG_PATH}</string>
    </array>

    <key>RunAtLoad</key>
    <true/>

    <key>KeepAlive</key>
    <dict>
        <key>Crashed</key>
        <true/>
        <key>SuccessfulExit</key>
        <false/>
    </dict>

    <key>StandardOutPath</key>
    <string>/var/log/kanata.out.log</string>

    <key>StandardErrorPath</key>
    <string>/var/log/kanata.err.log</string>

    <key>UserName</key>
    <string>root</string>
</dict>
</plist>
EOF
)

  # Check if the plist needs to be created or updated
  if [ ! -f "$KANATA_DAEMON_PLIST_PATH" ] || [ "$(sudo cat "$KANATA_DAEMON_PLIST_PATH" 2>/dev/null)" != "$EXPECTED_KANATA_PLIST" ]; then
    echo "Installing/updating Kanata daemon..."

    # Stop existing service if running
    sudo launchctl bootout system/com.kanata.daemon 2>/dev/null

    # Write the plist to system location
    echo "$EXPECTED_KANATA_PLIST" | sudo tee "$KANATA_DAEMON_PLIST_PATH" > /dev/null
    sudo chown root:wheel "$KANATA_DAEMON_PLIST_PATH"
    sudo chmod 644 "$KANATA_DAEMON_PLIST_PATH"

    # Load the service
    if sudo launchctl bootstrap system "$KANATA_DAEMON_PLIST_PATH" 2>/dev/null; then
      echo "Kanata daemon loaded successfully."
    else
      echo "Note: Kanata daemon may already be loaded or requires a restart."
    fi
  else
    echo "Kanata daemon is already up-to-date."
  fi
else
  echo "Warning: Kanata not found at ${KANATA_BREW_PATH}. Please install it with: brew install kanata"
fi

echo "üìã System Summary:"
echo "‚úÖ Services Configured:"
echo "  ‚Ä¢ GitHub Auto Push service: $([ -f "$GITHUB_AUTO_PUSH_PLIST_PATH" ] && echo "‚úÖ Active" || echo "‚ùå Failed")"
echo "  ‚Ä¢ SKHD hotkey daemon: $([ -f "$SKHD_PLIST_PATH" ] && echo "‚úÖ Active" || echo "‚ùå Not configured")"
echo "  ‚Ä¢ Kanata keyboard daemon: $([ -f "$KANATA_DAEMON_PLIST_PATH" ] && echo "‚úÖ Active" || echo "‚ùå Not configured")"
echo "  ‚Ä¢ Marta config symlink: $([ -L "$HOME/Library/Application Support/org.yanex.marta/conf.marco" ] && [ -e "$HOME/Library/Application Support/org.yanex.marta/conf.marco" ] && echo "‚úÖ Active" || echo "‚ùå Failed")"
echo "  ‚Ä¢ Spicetify theme: $(command -v spicetify >/dev/null 2>&1 && [ -d "/Applications/Spotify.app" ] && echo "‚úÖ Applied" || echo "‚ùå Skipped")"
echo ""
echo "üìù Manual Steps Remaining:"
echo "  ‚Ä¢ TCC Permissions (Accessibility, Automation, etc.)"
echo "  ‚Ä¢ Background app permissions"
echo "  ‚Ä¢ Keyboard shortcut conflicts"
echo "  ‚Ä¢ Git global ignore file setup"
echo "  ‚Ä¢ App Store installations"
echo "  ‚Ä¢ Clone personal repositories"
echo ""
echo "üéâ Run OnChange [Before] Package Install Setup Complete!"
