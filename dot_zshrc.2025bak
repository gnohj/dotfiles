# ---------------------------------------------------------------------  Load User Settings
if [ -f "$HOME/.zsh_env" ]; then
  source "$HOME/.zsh_env"
fi

if [ -f "$HOME/.zsh_radioctl_cmds" ]; then
  source "$HOME/.zsh_radioctl_cmds"
fi

# Disable Console Do Not Track (specification)
export DO_NOT_TRACK=1

# Force color for cli apps
export FORCE_COLOR=1


# --------------------------------------------------------------------- Prompt
autoload -Uz compinit
compinit

radio_ctl_prompt=$(get_rc)
if [[ $radio_ctl_prompt != 1 ]] then;
  export RADIO_CTL=$(get_rc)
fi

if typeset -f update_rc >/dev/null 2>&1; then
  update_rc
fi

getPNPM() {
  pnpm_version_manifest=$(node -p -e "require('./package.json').packageManager" 2>/dev/null)
  pnpm_version=$(pnpm --version 2>/dev/null)
  if [[ $pnpm_version_manifest == *"pnpm@"* ]] && [[ -z "$(echo $pnpm_version | grep -o "Unsupported")" ]]; then
    echo "[pnpm v$pnpm_version]"
  else
    echo 1
  fi
}
pnpm_prompt=$(getPNPM)
if [[ $pnpm_prompt != 1 ]] then;
  export PNPM=$(getPNPM)
fi

# brew init starship - https://github.com/starship/starship/issues/3418
if [[ "${widgets[zle-keymap-select]#user:}" == "starship_zle-keymap-select" || \
      "${widgets[zle-keymap-select]#user:}" == "starship_zle-keymap-select-wrapped" ]]; then
    zle -N zle-keymap-select "";
fi

eval "$(starship init zsh)"

# change the config dir for xdg
export XDG_CONFIG_HOME="$HOME/.config"

# brew activate autosuggestions
source $HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# brew activate zsh-syntax-highlighting
source $HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# https://github.com/3rd/image.nvim
export DYLD_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_LIBRARY_PATH"

# Completion styling - allow case-insensitive matching for cd
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# --------------------------------------------------------------------- Custom Aliases

# Obisidian
alias oo='cd $HOME/Obsidian/second-brain'
# Obsidian review
alias or='nvim $HOME/Obsidian/second-brain/0-Inbox/*.md'
export PATH="$HOME/bin:$PATH"

# Chezmoi
alias cz='chezmoi'

# NeoVim Shorcuts
ESLINT_USE_FLAT_CONFIG=false
alias vi=nvim
alias vim=nvim
alias n="ESLINT_USE_FLAT_CONFIG=false nvim"
export EDITOR="ESLINT_USE_FLAT_CONFIG=false nvim"

# Git Shorcuts
alias g="git"
alias cob="gcbz"
alias co="gco"
alias gst="git status"
alias gamend="g commit --amend --date=now --no-edit"
alias gpom="g pull origin master"
alias gcom="g checkout master"
alias gpod="g pull origin develop"
alias gcod="g checkout develop"
alias gg="lazygit"

# reload zshell
alias reload="source ~/.zshrc"

# speedtest
alias speed="speedtest"

# Load Fastfetch
# fastfetch

# Yarn clean
alias yarc='yarn cache clean && rm -rf node_modules dist && yarn install'

# pnpm
alias pn="pnpm"

# clr
alias clr="clear"

# bat
alias cat="bat"
export BAT_THEME=tokyonight_night

# fkill
alias kp='fkill'

# eza for modern ls view
alias ls="eza --icons=always --long --all"

# pnpm
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# brew leaves list (installed packages by me)
alias leaves="brew leaves"

# brew outdated list (installed packages by me)
alias outdated="comm -12 <(brew leaves | sort) <(brew outdated --formula | awk '{print \$1}' | sort) | awk '{print \"outdated brew package: \" \$1}'"



# ---------------------------------------------------------------------  History
# history command - default only shows last 15 entries.. passeing 1 arg shows all entries
alias history='history 1'
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt INC_APPEND_HISTORY
setopt sharehistory
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# ---------------------------------------------------------------------  Integrations
# -----------------------------  FNM

eval "$(fnm env --use-on-cd --shell zsh)"

reload_prompt() {
    fnm use
    corepack enable
    reload
    outdated
}

# Needs 'jq' installed
# jq -r .version package.json 2>/dev/null
# if [ $? -eq 0 ]
# then
#   fnm use
# fi

# -----------------------------  Fastly CLI Auto Completion
eval "$(fastly --completion-script-zsh)"

# ----------------------------- Zoxide "inspired by z/jump-around"

# The following lines were added by compinstall
bindkey '^I' expand-or-complete-prefix
zstyle ':completion:*' completer _complete _prefix
set -o completeinword
# End of lines added by compinstall

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform

eval "$(zoxide init zsh)"



eval "$(direnv hook $SHELL)"


eval $(thefuck --alias)
eval $(thefuck --alias fk)
eval $(thefuck --alias fck)


# -----------------------------  ZSH VI Mode
# https://github.com/jeffreytse/zsh-vi-mode
  if [ -f "$(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh" ]; then
    source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
    ZVM_VI_ESCAPE_BINDKEY=jk
    ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
    ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
    ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY

    function tmux_left_pane() {
      export TMUX_PANE_DIRECTION="right"
      if [[ $TMUX_PANE_DIRECTION == "right" ]]; then
        tmux select-pane -L # Move to the left (opposite of right)
      elif [[ $TMUX_PANE_DIRECTION == "bottom" ]]; then
        tmux select-pane -U # Move to the top (opposite of bottom)
      fi
      tmux resize-pane -Z
    }

    zvm_define_widget tmux_left_pane

    function zvm_after_lazy_keybindings() {
      zvm_bindkey vicmd 'gh' beginning-of-line
      zvm_bindkey vicmd 'gl' end-of-line
      zvm_bindkey vicmd '^[f' tmux_left_pane
      zvm_bindkey viins '^[f' tmux_left_pane
    }

    function zvm_before_init_commands() {
      zvm_bindkey viins '^[[A' history-beginning-search-backward
      zvm_bindkey viins '^[[B' history-beginning-search-forward
      zvm_bindkey vicmd '^[[A' history-beginning-search-backward
      zvm_bindkey vicmd '^[[B' history-beginning-search-forward
    }

    ZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_BEAM
    ZVM_NORMAL_MODE_CURSOR=$ZVM_CURSOR_BLOCK
    ZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE

    # Source .fzf.zsh so that the ctrl+r bindkey is given back fzf
    zvm_after_init_commands+=('[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh')
  fi


# -----------------------------  ZSH History Substring Search
# https://github.com/zsh-users/zsh-history-substring-search - place this after fzf
source $HOMEBREW_PREFIX/share/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

eval "$(/opt/homebrew/bin/brew shellenv)"

# -----------------------------  Aider
export AIDER_SUBTREE_ONLY=1

. "$HOME/.local/bin/env"

# -----------------------------  Bun completions
[ -s "/Users/gnohj/.bun/_bun" ] && source "/Users/gnohj/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# -----------------------------  Delta (nicer git diff)
if ! command -v delta &> /dev/null; then
    echo "Delta not found. Installing delta..."
    # macOS - install with Homebrew
    if command -v brew &> /dev/null; then
        brew install git-delta
        echo "Delta installed successfully!"
    else
        echo "Homebrew not found. Please install Homebrew first, then run: brew install git-delta"
    fi
fi

# Configure git to use delta if it's installed
if command -v delta &> /dev/null; then
    # Configure delta as git pager if not already configured
    if ! git config --get core.pager | grep -q "delta"; then
        git config --global core.pager "delta"
        git config --global interactive.diffFilter "delta --color-only"
        git config --global delta.navigate true
        git config --global delta.light false
        git config --global delta.side-by-side true
        git config --global delta.line-numbers true
        echo "Git configured to use delta as pager"
    fi
    # Set an alias for viewing git diffs with delta
    alias gdelta='git diff | delta'
fi

# -----------------------------  Sesh (Tmux Manager)
# Check if sesh is installed (Smart tmux session manager)
if ! command -v sesh &> /dev/null; then
    echo "Sesh not found. Installing sesh..."
    if command -v brew &> /dev/null; then
        brew install sesh
        echo "Sesh installed successfully!"
    else
        echo "Homebrew not found. Please install Homebrew first, then run: brew install joshmedeski/sesh/sesh"
    fi
fi

function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt 'âš¡  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}
zle -N sesh-sessions
# Bind Ctrl+X to the sesh-sessions widget
bindkey -M emacs '^x' sesh-sessions
bindkey -M vicmd '^x' sesh-sessions
bindkey -M viins '^x' sesh-sessions

# -----------------------------  End

