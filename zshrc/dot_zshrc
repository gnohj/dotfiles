#-------------------------------------------------------------------------------
#--                  Zshrc Prerequisites
#-------------------------------------------------------------------------------
# Mac Only
# Neovim + Git + Terminal (nerd font configured/installed) + NPM + PNPM + Yarn


#-------------------------------------------------------------------------------
#--         Powerlevel10k Instant Prompt (INFO: disabled for fastfetch)
#-------------------------------------------------------------------------------
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

#-------------------------------------------------------------------------------
#--                      Zsh Configuration
#-------------------------------------------------------------------------------
export ZSH_COMPDUMP="$ZDOTDIR/.zcompdump"

# Set up function path to include functions directory
fpath=("$ZDOTDIR/functions" $fpath)

# Redirect zsh_sessions to the new location - used by Terminal.app on macOS
export SHELL_SESSIONS_DIR="$ZDOTDIR/zsh_sessions"


#-------------------------------------------------------------------------------
#--                      User Settings
#-------------------------------------------------------------------------------
if [ -f "$HOME/.zsh_gnohj_env" ]; then
  source "$HOME/.zsh_gnohj_env"
fi

if [ -f "$HOME/.zsh_radioctl_cmds" ]; then
  source "$HOME/.zsh_radioctl_cmds"
fi


#-------------------------------------------------------------------------------
#--                           Zinit
#-------------------------------------------------------------------------------

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit (optimized lady loading plugin manager), if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

alias zstatus='zinit status'


#-------------------------------------------------------------------------------
#--                 Zinit - Prompt (Powerlevel10k)
#-------------------------------------------------------------------------------

zinit ice depth=1; zinit light romkatv/powerlevel10k

#-------------------------------------------------------------------------------
#--                 Zinit - Plugins
#-------------------------------------------------------------------------------

zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting
# zinit light Aloxaf/fzf-tab - TODO: doesn't work


#-------------------------------------------------------------------------------
#--                 Zinit -  Snippets
#-------------------------------------------------------------------------------

zinit snippet OMZ::plugins/git/git.plugin.zsh
zinit snippet OMZL::git.zsh
zinit snippet OMZP::aws
zinit snippet OMZP::chezmoi
zinit snippet OMZP::command-not-found
zinit snippet OMZP::docker
zinit snippet OMZP::git
zinit snippet OMZP::golang
zinit snippet OMZP::npm
zinit snippet OMZP::ssh
zinit snippet OMZP::sudo

#-------------------------------------------------------------------------------
#--        Zinit -  Load Completions whenever zshell starts
#-------------------------------------------------------------------------------

# Define the function with the correct name
function _history_substring_search_config() {
  bindkey '^[[A' history-substring-search-up
  bindkey '^[[B' history-substring-search-down
}

# Set ice modifiers BEFORE loading the plugin
zinit ice wait lucid atload'_history_substring_search_config'
zinit load zsh-users/zsh-history-substring-search

# Load completions whenever zshell starts
# initializes entire zsh completion system, process all registered completion fns, builds completion cache
autoload -Uz compinit && compinit -d $ZSH_COMPDUMP

#-------------------------------------------------------------------------------
#--        Zinit -  Replay all Cached Completions
#-------------------------------------------------------------------------------

zinit cdreplay -q


#-------------------------------------------------------------------------------
#                  Keybindings
#-------------------------------------------------------------------------------

# bindkey '^p' history-search-backward
# bindkey '^n' history-search-forward


#-------------------------------------------------------------------------------
#                  History
#-------------------------------------------------------------------------------

HISTSIZE=5000
# Updated history file location
HISTFILE=$ZDOTDIR/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase # erase all dupes in history file
setopt appendhistory
setopt sharehistory
# setopt hist_ignore_space - i want sensitive args to be persisted
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups


#-------------------------------------------------------------------------------
#                  Completion Styling
#-------------------------------------------------------------------------------

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # INFO: cd desktop versus cd Desktop
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
# zstyle ':completion:*' menu no - TODO: fzf/tab plugin doesnt work, so commented this out
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'


#-------------------------------------------------------------------------------
#                  Aliases
#-------------------------------------------------------------------------------

# Obisidian
alias oo='cd $HOME/Obsidian/second-brain'
# Obsidian review
alias or='nvim $HOME/Obsidian/second-brain/0-Inbox/*.md'

# Chezmoi - TODO: add chezmoi check/download (brew)
alias cz='chezmoi'

# NeoVim Shorcuts
ESLINT_USE_FLAT_CONFIG=false
alias vi=nvim
alias vim=nvim
alias n="ESLINT_USE_FLAT_CONFIG=false nvim"
export EDITOR="ESLINT_USE_FLAT_CONFIG=false nvim"

# Git Shorcuts
alias g="git"
alias cob="gcbz"
alias co="gco"
alias gst="git status"
alias gamend="g commit --amend --date=now --no-edit"
alias gpom="g pull origin master"
alias gcom="g checkout master"
alias gpod="g pull origin develop"
alias gcod="g checkout develop"
alias gg="lazygit"

# reload zshell - Updated to reflect new location
alias reload="source $ZDOTDIR/.zshrc"

# speedtest - TODO: add speedtest-cli check/download (brew)
alias speed="speedtest"


# Yarn clean
alias yarc='yarn cache clean && rm -rf node_modules dist && yarn install'

# pnpm
alias pn="pnpm"

# clr
alias c='clear'

# bat - TODO: add bat check/download (brew)
alias cat="bat"

# eza for modern ls view - TODO: add eza check/download (brew)
alias ls="eza --icons=always --long --all"

# brew leaves list (installed packages by me)
alias leaves="brew leaves"

# brew outdated list (installed packages by me)
alias outdated="comm -12 <(brew leaves | sort) <(brew outdated --formula | awk '{print \$1}' | sort) | awk '{print \"outdated brew package: \" \$1}'"

#-------------------------------------------------------------------------------
#                  Paths
#-------------------------------------------------------------------------------

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# pnpm
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac



#-------------------------------------------------------------------------------
#                  Script Integrations
#-------------------------------------------------------------------------------

# -----------------------------  Aider - TODO: add Aider check/download (brew)
export AIDER_SUBTREE_ONLY=1

. "$HOME/.local/bin/env"

# -----------------------------  Bun completions - TODO: add bun check/download (brew)
[ -s "/Users/gnohj/.bun/_bun" ] && source "/Users/gnohj/.bun/_bun"


# -----------------------------  Delta (nicer git diff)
if ! command -v delta &> /dev/null; then
    echo "Delta not found. Installing delta..."
    # macOS - install with Homebrew
    if command -v brew &> /dev/null; then
        brew install git-delta
        echo "Delta installed successfully!"
    else
        echo "Homebrew not found. Please install Homebrew first, then run: brew install git-delta"
    fi
fi

# Configure git to use delta if it's installed
if command -v delta &> /dev/null; then
    # Configure delta as git pager if not already configured
    if ! git config --get core.pager | grep -q "delta"; then
        git config --global core.pager "delta"
        git config --global interactive.diffFilter "delta --color-only"
        git config --global delta.navigate true
        git config --global delta.light false
        git config --global delta.side-by-side true
        git config --global delta.line-numbers true
        echo "Git configured to use delta as pager"
    fi
    # Set an alias for viewing git diffs with delta
    alias gdelta='git diff | delta'
fi


#
# -----------------------------  Fastfetch - TODO: add fastfetch check/download (brew)
# INFO: kitty is needed to render custom images via `kitty-icat`; arch -arm64 brew install kitty
# Add a flag to control fastfetch execution
fastfetch


# -----------------------------  Sesh (Tmux Manager)
# Check if sesh is installed (Smart tmux session manager)
if ! command -v sesh &> /dev/null; then
    echo "Sesh not found. Installing sesh..."
    if command -v brew &> /dev/null; then
        brew install sesh
        echo "Sesh installed successfully!"
    else
        echo "Homebrew not found. Please install Homebrew first, then run: brew install joshmedeski/sesh/sesh"
    fi
fi

function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}
zle -N sesh-sessions
# Bind Ctrl+X to the sesh-sessions widget
bindkey -M emacs '^x' sesh-sessions
bindkey -M vicmd '^x' sesh-sessions
bindkey -M viins '^x' sesh-sessions


# -----------------------------  ZSH VI Mode
# https://github.com/jeffreytse/zsh-vi-mode
  if [ -f "$(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh" ]; then
    source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
    ZVM_VI_ESCAPE_BINDKEY=jk
    ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
    ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
    ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY

    function tmux_left_pane() {
      export TMUX_PANE_DIRECTION="right"
      if [[ $TMUX_PANE_DIRECTION == "right" ]]; then
        tmux select-pane -L # Move to the left (opposite of right)
      elif [[ $TMUX_PANE_DIRECTION == "bottom" ]]; then
        tmux select-pane -U # Move to the top (opposite of bottom)
      fi
      tmux resize-pane -Z
    }

    zvm_define_widget tmux_left_pane

    function zvm_after_lazy_keybindings() {
      zvm_bindkey vicmd 'gh' beginning-of-line
      zvm_bindkey vicmd 'gl' end-of-line
      zvm_bindkey vicmd '^[f' tmux_left_pane
      zvm_bindkey viins '^[f' tmux_left_pane
    }

    function zvm_before_init_commands() {
      zvm_bindkey viins '^[[A' history-beginning-search-backward
      zvm_bindkey viins '^[[B' history-beginning-search-forward
      zvm_bindkey vicmd '^[[A' history-beginning-search-backward
      zvm_bindkey vicmd '^[[B' history-beginning-search-forward
    }

    ZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_BEAM
    ZVM_NORMAL_MODE_CURSOR=$ZVM_CURSOR_BLOCK
    ZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE

    # Source .fzf.zsh so that the ctrl+r bindkey is given back fzf
    zvm_after_init_commands+=('[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh')
  fi

#-------------------------------------------------------------------------------
#                  Global Helpers
#-------------------------------------------------------------------------------

# Disable Console Do Not Track (specification)
export DO_NOT_TRACK=1

# Force color for cli apps
export FORCE_COLOR=1

# Define the custom radioctl segment function for Powerlevel10k
function prompt_radio_ctl() {
  if [[ $RADIO_CTL != 1 ]]; then
    p10k segment -f yellow -t "$RADIO_CTL"
  fi
}

# Define the custom pnpm segment function for Powerlevel10k
function prompt_pnpm_info() {
  if [[ $PNPM != 1 ]]; then
    p10k segment -f green -t "$PNPM"
  fi
}

# Helper function to reload zsh configuration without running fastfetch
reload_zsh_config() {
    # Save current directory
    local current_dir=$(pwd)
    
    # Suppress stderr when running fnm use
    fnm use 2>/dev/null || true
    corepack enable
    
    # Update radioctl
    if typeset -f update_rc > /dev/null 2>&1; then
      update_rc
    fi
    radio_ctl_prompt=$(get_rc)
    if [[ $radio_ctl_prompt != 1 ]]; then
      export RADIO_CTL=$(get_rc)
    fi
    
    # Update pnpm
    pnpm_prompt=$(getPNPM)
    if [[ $pnpm_prompt != 1 ]]; then
      export PNPM=$(getPNPM)
    fi
    
    # Source only zsh configurations, not the whole .zshrc
    if [ -f "$HOME/.zsh_env" ]; then
      source "$HOME/.zsh_env"
    fi
    
    if [ -f "$HOME/.zsh_radioctl_cmds" ]; then
      source "$HOME/.zsh_radioctl_cmds"
    fi
    
    # Source p10k.zsh to update the prompt appearance
    [[ ! -f $ZDOTDIR/.p10k.zsh ]] || source $ZDOTDIR/.p10k.zsh
    
    # Change back to original directory (in case any of the sourced files changed it)
    cd "$current_dir"
    
    # Check outdated packages
    outdated
}

# Global Reload Prompt Fn (updated to use the helper function)
reload_prompt() {
    reload_zsh_config
    # Refresh the prompt (forces p10k to redraw)
    zle reset-prompt 2>/dev/null || true
}

#-------------------------------------------------------------------------------
#                  Power Level 10k Configuration
#-------------------------------------------------------------------------------

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f $ZDOTDIR/.p10k.zsh ]] || source $ZDOTDIR/.p10k.zsh


#-------------------------------------------------------------------------------
#                  Eval Integrations
#-------------------------------------------------------------------------------

eval $(thefuck --alias fk) # TODO: add thefuck check/download (brew)
eval "$(direnv hook $SHELL)" # TODO: add direnv check/download (brew)
eval "$(fastly --completion-script-zsh)"  # TODO: add fastly cli check/download (brew)
eval "$(fnm env --use-on-cd --shell zsh)" # TODO: add fnm check/download (brew)
eval "$(fzf --zsh)" # TODO: add fzf check/download (brew)

export _ZO_DATA_DIR="$ZDOTDIR"
eval "$(zoxide init zsh)" # TODO: add zoxide check/download (brew)
