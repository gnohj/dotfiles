#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#  ‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
#    ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     
#   ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     
#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
#
#  Z shell run commands configuration
#  https://zsh.sourceforge.io/

#-------------------------------------------------------------------------------
#--                      Zsh Configuration
#-------------------------------------------------------------------------------
export ZSH_COMPDUMP="$ZDOTDIR/.zcompdump"

# Set up function path to include functions directory
fpath=("$ZDOTDIR/functions" $fpath)

# Redirect zsh_sessions to the new location - used by Terminal.app on macOS
export SHELL_SESSIONS_DIR="$ZDOTDIR/zsh_sessions"

#-------------------------------------------------------------------------------
#--                      User Settings
#-------------------------------------------------------------------------------
if [ -f "$HOME/.zsh_gnohj_env" ]; then
  source "$HOME/.zsh_gnohj_env"
fi

if [ -f "$HOME/.zsh_radioctl_cmds" ]; then
  source "$HOME/.zsh_radioctl_cmds"
fi

if [ -f "$HOME/.zsh_aws_cmds" ]; then
  source "$HOME/.zsh_aws_cmds"
fi

# Source colorscheme configuration and active colorscheme
if [ -f "$HOME/.config/colorscheme/colorscheme-vars.sh" ]; then
  source "$HOME/.config/colorscheme/colorscheme-vars.sh"
fi

# Source active colorscheme to get color variables (gnohj_color01, etc.)
if [ -f "$HOME/.config/colorscheme/active/active-colorscheme.sh" ]; then
  source "$HOME/.config/colorscheme/active/active-colorscheme.sh"
fi

#-------------------------------------------------------------------------------
#--                      Nix Package Manager
#-------------------------------------------------------------------------------
# Source nix-daemon if installed (added by nix-darwin/Nix installer)
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  source '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi

#-------------------------------------------------------------------------------
#--                      Homebrew Package Manager
#-------------------------------------------------------------------------------
# Add Homebrew to PATH (for packages managed by nix-darwin)
# Examples: thefuck, skhd, gitmux, sesh, borders, etc.
if [ -d '/opt/homebrew/bin' ]; then
  export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
fi

#-------------------------------------------------------------------------------
#--                           Zinit
#-------------------------------------------------------------------------------

source /opt/homebrew/opt/zinit/zinit.zsh

#-------------------------------------------------------------------------------
#--                 Zinit - Prompt (Starship)
#-------------------------------------------------------------------------------

# Function to update starship prompt/config and environment based on current repo
function update_starship_env() {
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      repo_name=$(basename "$(git rev-parse --show-toplevel)")
      # Only use infra config for web and inferno-monorepo
      if [[ "$repo_name" == "web" ]] || [[ "$repo_name" == "inferno-monorepo" ]]; then
        export STARSHIP_CONFIG=~/.config/starship/starship-infra.toml
        if [[ "$repo_name" == "inferno-monorepo" ]]; then
          export AWS_PROFILE="inferno"
        elif [[ "$repo_name" == "web" ]]; then
          export AWS_PROFILE="ihr-prod"
        fi
        radio_ctl_prompt=$(get_rc)
        if [[ $radio_ctl_prompt != 1 ]]; then
          export RADIO_CTL="$(get_rc)"
        else
          unset RADIO_CTL
        fi
      else
        export STARSHIP_CONFIG=~/.config/starship/starship.toml
        unset RADIO_CTL
        unset AWS_PROFILE
      fi
  else
      export STARSHIP_CONFIG=~/.config/starship/starship.toml
      unset RADIO_CTL
      unset AWS_PROFILE
  fi
}

# Load Custom Segments for starship prompt before starship get's evaled
update_starship_env

# Add to chpwd hooks to run when changing directories
autoload -Uz add-zsh-hook
add-zsh-hook chpwd update_starship_env

# brew init starship - https://github.com/starship/starship/issues/3418
if [[ "${widgets[zle-keymap-select]#user:}" == "starship_zle-keymap-select" || \
      "${widgets[zle-keymap-select]#user:}" == "starship_zle-keymap-select-wrapped" ]]; then
    zle -N zle-keymap-select "";
fi

# Load starship
export PROMPT_NAME="starship"
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit load starship/starship


#-------------------------------------------------------------------------------
#--                 Zinit - Plugins
#-------------------------------------------------------------------------------

# zinit light zsh-users/zsh-completions - changes text green/red depending on valid command
zinit light zdharma-continuum/fast-syntax-highlighting

# Configure transient prompt BEFORE loading the plugin
# This must be set before loading zsh-transient-prompt
# Using static blue color since dynamic color doesn't work correctly with transient prompt (known limitation for zsh-transient-prompt; it cant preserve original exit status)
TRANSIENT_PROMPT_TRANSIENT_PROMPT='%F{blue}‚ùØ%f '
TRANSIENT_PROMPT_TRANSIENT_RPROMPT=''

# Load zsh-transient-prompt AFTER syntax highlighting to avoid conflicts
zinit ice wait lucid
zinit light olets/zsh-transient-prompt

# loads extra completion definitions that aren't officially part of zsh
zinit load zsh-users/zsh-completions

# shows a single suggestions (gray text after your cursor) based on latest cmd history
# can accept it with right arrow.. this plugin has no back suggestions..
# if you want to go back to (recento to latest comand history) just toggle <C-p> previous or <C-n> next
zinit light zsh-users/zsh-autosuggestions

# üìé ZSH plugin that reminds you to use existing aliases for commands you just typed
zinit load MichaelAquilina/zsh-you-should-use

# üîñ Quickly navigate your work path!
# zinit load wfxr/formarks

# Load zsh-vi-mode via Zinit with proper configuration
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode

# üöÄ Better vim bindings for Zsh!
# https://github.com/jeffreytse/zsh-vi-mode
ZVM_VI_ESCAPE_BINDKEY=jk
ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
ZVM_VI_HIGHLIGHT_BACKGROUND=#275378
ZVM_OPPEND_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE

function zvm_after_init() {
  # Source .fzf.zsh so that ctrl+r works
  # [ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh
}

#-------------------------------------------------------------------------------
#--                 Zinit -  Snippets
#-------------------------------------------------------------------------------

# adds git aliases, g=git, gst=git status, etc.
zinit snippet OMZ::plugins/git/git.plugin.zsh 
zinit snippet OMZL::git.zsh

# mostly just cli completions
export SHOW_AWS_PROMPT=false
zinit snippet OMZP::aws  # Disabled - adds AWS to RPROMPT
zinit snippet OMZP::chezmoi
zinit snippet OMZP::command-not-found
zinit snippet OMZP::docker
zinit snippet OMZP::golang

#-------------------------------------------------------------------------------
#--        Zinit -  Load Completions whenever zshell starts
#-------------------------------------------------------------------------------


# Load completions whenever zshell starts
# initializes entire zsh completion system, process all registered completion fns, builds completion cache
autoload -Uz compinit && compinit -d $ZSH_COMPDUMP

# Call this after zsh completion system loads.
if [[ -n "$(command -v fzf)" ]]; then
  # Replace zsh's default completion selection menu with fzf!
  zinit load Aloxaf/fzf-tab
fi

# Define the function with the correct name
function _history_substring_search_config() {
  bindkey '^P' history-substring-search-up # ctrl + p
  bindkey '^N' history-substring-search-down # ctrl + n
}

# Set ice modifiers BEFORE loading the plugin
zinit ice wait lucid atload'_history_substring_search_config'
zinit load zsh-users/zsh-history-substring-search

#-------------------------------------------------------------------------------
#--        Zinit -  Replay all Cached Completions
#-------------------------------------------------------------------------------

zinit cdreplay -q


#-------------------------------------------------------------------------------
#                  Keybindings
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
#                  Auto Suggestion / Completion Styling
#-------------------------------------------------------------------------------

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # INFO: cd desktop versus cd Desktop
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:*' fzf-flags --gutter=' ' --color=bg+:$gnohj_color13,border:$gnohj_color03,fg:$gnohj_color02,fg+:$gnohj_color02,hl+:$gnohj_color04,info:$gnohj_color09,prompt:$gnohj_color04,pointer:$gnohj_color04,marker:$gnohj_color04,header:$gnohj_color09,list-border:6,input-border:3,preview-border:-1,header-bg:-1,header-border:6
zstyle ':fzf-tab:complete:*' fzf-preview 'eza -1 --color=always $realpath 2>/dev/null || echo $word'
# Special preview for AWS commands
zstyle ':fzf-tab:complete:aws:*' fzf-preview 'aws $word help 2>/dev/null | head -20 || echo $word'

#-------------------------------------------------------------------------------
#                  History
#-------------------------------------------------------------------------------

HISTSIZE=10000
# Updated history file location
HISTFILE=$ZDOTDIR/.zsh_history
SAVEHIST=$HISTSIZE
setopt appendhistory
setopt sharehistory
setopt hist_ignore_dups


#-------------------------------------------------------------------------------
#                  Aliases
#-------------------------------------------------------------------------------
# Blacklist for `you-should-use` plugin
export YSU_IGNORED_ALIASES=("vi" "vim")

# Zinit Status
alias zstatus='zinit status'

# Obisidian
alias oo='cd $HOME/Obsidian/second-brain'
# Obsidian review
alias or='nvim $HOME/Obsidian/second-brain/0-Inbox/*.md'

# Chezmoi
alias cz='chezmoi'
alias czd='chezmoi diff'

# Select a file with nvim in curr dir
alias fzn='nvim $(fzf -m --border-label="üìÇ Current Directory" --preview="bat -n --color=always --line-range=:500 {} 2>/dev/null || echo \"Error previewing file\"" --height=70% --layout=default --border=rounded)'

# Nvim oldfiles with fzf - open recent files from Neovim history
_fzf_nvim_oldfiles() {
    # Get the oldfiles list from Neovim
    local oldfiles=($(nvim -u NONE --headless +'lua io.write(table.concat(vim.v.oldfiles, "\n") .. "\n")' +qa))

    # Filter invalid paths or files not found
    local valid_files=()
    for file in "${oldfiles[@]}"; do
        if [[ -f "$file" ]]; then
            valid_files+=("$file")
        fi
    done

    # Use fzf to select from valid files
    local files=($(printf "%s\n" "${valid_files[@]}" | \
        grep -v '\[.*' | \
        fzf --multi \
        --border-label="üìú Neovim History" \
        --preview 'bat -n --color=always --line-range=:500 {} 2>/dev/null || echo "Error previewing file"' \
        --height=70% \
        --layout=default \
        --border=rounded))

    # Open selected files in Neovim
    [[ ${#files[@]} -gt 0 ]] && nvim "${files[@]}"
}
alias fzh='_fzf_nvim_oldfiles'

# Search files across zoxide-tracked directories with fzf
_fzf_zoxide_search() {
    if [ -z "$1" ]; then
        # No args: search all files in zoxide-tracked directories
        file="$(fd --type f -I -H -E .git -E .git-crypt -E .cache -E .backup | fzf --border-label="üöÄ Zoxide Directories" --height=70% --border=rounded --preview='bat -n --color=always --line-range :500 {}')"
        if [ -n "$file" ]; then
            nvim "$file"
        fi
    else
        # With args: search for pattern in zoxide directories
        lines=$(zoxide query -l | xargs -I {} fd --type f -I -H -E .git -E .git-crypt -E .cache -E .backup -E .vscode "$1" {} | fzf --no-sort --border-label="üöÄ Zoxide Directories" --border=rounded)
        line_count="$(echo "$lines" | wc -l | xargs)"

        if [ -n "$lines" ] && [ "$line_count" -eq 1 ]; then
            # Single match: open directly
            nvim "$lines"
        elif [ -n "$lines" ]; then
            # Multiple matches: fzf with preview
            file=$(echo "$lines" | fzf --query="$1" --border-label="üöÄ Zoxide Directories" --height=70% --border=rounded --preview='bat -n --color=always --line-range :500 {}')
            if [ -n "$file" ]; then
                nvim "$file"
            fi
        else
            echo "No matches found." >&2
        fi
    fi
}
alias fzz='_fzf_zoxide_search'

# Trigger Spotify Sketchybar Update
alias spot='sketchybar --trigger spotify'

# Trigger Spicetify Sketchybar Update
alias spice='spicetify auto'

# Mailsy ( Anon email generation )
alias mail='mailsy'

# Disk Usage
alias disk='duf --sort usage'

# NeoVim Shorcuts
alias n="nvim"
alias vi="nvim"
alias vim="nvim"
export EDITOR="nvim"

# Atuin Script Shortcuts
alias iheart-token="atuin scripts run iheart-token"
alias fastly-debug="atuin scripts run fastly-debug"

# Git Shorcuts
alias gamend="g commit --amend --date=now --no-edit"
alias gpom="g pull origin master"
alias gcom="g checkout master"
alias gpod="g pull origin develop"
alias gcod="g checkout develop"
alias lg="HUSKY=0 LG_CONFIG_FILE=~/.config/lazygit/config.yml lazygit"

# Lazydocker
alias ld="lazydocker"

# reload zshell - Updated to reflect new location
alias reload="source $ZDOTDIR/.zshrc"

# speedtes
alias speed="speedtest"

# Yarn clean
alias yarc='yarn cache clean && rm -rf node_modules dist && yarn install'

# pnpm
alias pn="pnpm"

# clr
alias c='clear'

# claude resume
alias cr='claude --dangerously-skip-permissions --resume'
alias cs='claude --dangerously-skip-permissions'

# bat
alias cat="bat"

# eza for modern ls view
alias ls="eza --icons=always --long --all"

# brew leaves list (installed packages by me)
alias leaves="brew leaves"

# brew outdated list (all outdated packages - formulas and casks)
alias outdated="brew outdated | awk '{print \"outdated brew package: \" \$1}' && mise outdated"

# Set an alias for viewing git diffs with delta
alias gdelta='git diff | delta'


#-------------------------------------------------------------------------------
#                  Paths
#-------------------------------------------------------------------------------

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# pnpm
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# add second-brain executables to path - og,on
export PATH="$HOME/_bin:$PATH"

# flameshot
if [[ ":$PATH:" != *":/Applications/flameshot.app/Contents/MacOS:"* ]]; then
  export PATH="/Applications/flameshot.app/Contents/MacOS:$PATH"
fi

export PATH="~/.local/bin:$PATH"

#-------------------------------------------------------------------------------
#                  Script Integrations
#-------------------------------------------------------------------------------

# -----------------------------  Sketchybar Brew Notification
# Setup sketchybar brew notification
if command -v sketchybar &>/dev/null; then
    sketchybar --add event brew_update 2>/dev/null
    sketchybar --subscribe widgets.brew_notification brew_update 2>/dev/null
    function brew() {
        command arch -arm64 brew "$@"
        # Only trigger on specific commands that actually change state
        case "$1" in
            install|uninstall|upgrade|update|list)
                sketchybar --trigger brew_update 2>/dev/null &
                ;;
        esac
    }
fi

# -----------------------------  Bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"



# -----------------------------  Tmux - Update Pane Path -so that lazygit (rctrl+g) can work anywhere (buffer, tmux pane, etc.)
if [[ -n "$TMUX" ]]; then
  function update_tmux_pwd() {
    if [[ -n "$TMUX_PANE" ]]; then
      tmux set-environment -t "$TMUX_PANE" PANE_CWD_${TMUX_PANE} "$PWD" 2>/dev/null
    fi
  }

  function cleanup_tmux_pane() {
    if [[ -n "$TMUX_PANE" ]]; then
      tmux set-environment -u -t "$TMUX_PANE" PANE_CWD_${TMUX_PANE} 2>/dev/null
    fi
  }
  trap cleanup_tmux_pane EXIT

  chpwd_functions+=(update_tmux_pwd)
  function z() {
    __zoxide_z "$@" && update_tmux_pwd
  }
fi

# -----------------------------  Sesh
function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '‚ö°  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}
zle -N sesh-sessions
# Bind Ctrl+X to the sesh-sessions widget
bindkey -M vicmd '^x' sesh-sessions
bindkey -M viins '^x' sesh-sessions

#-------------------------------------------------------------------------------
#                  Global Helpers
#-------------------------------------------------------------------------------

# Disable Console Do Not Track (specification)
export DO_NOT_TRACK=1
export DISABLE_TELEMETRY=1

export HOMEBREW_NO_AUTO_UPDATE="1"

# Force ghostty detection for snacks image - https://github.com/folke/snacks.nvim/blob/main/docs/image.md
export SNACKS_GHOSTTY=true

# Disable AWS prompt (handled by starship/ohmyposh)
export SHOW_AWS_PROMPT=false

# Force color for cli apps
export FORCE_COLOR=1

# Configure fzf to use fd for file searching (respects .gitignore by default)
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

# Generate LS_COLORS from active colorscheme (called after colorscheme is loaded)
generate_ls_colors() {
  # Convert hex to RGB
  hex_to_rgb() {
    local hex="${1#\#}"
    printf "38;2;%d;%d;%d" "0x${hex:0:2}" "0x${hex:2:2}" "0x${hex:4:2}"
  }

  # Use active colorscheme variables
  local dir_color="1;$(hex_to_rgb "$gnohj_color04")"  # Bold directories
  local link_color="$(hex_to_rgb "$gnohj_color03")"   # Symlinks
  local exec_color="1;$(hex_to_rgb "$gnohj_color02")" # Bold executables
  local archive_color="$(hex_to_rgb "$gnohj_color11")" # Archives
  local media_color="$(hex_to_rgb "$gnohj_color01")"  # Images/videos
  local audio_color="$(hex_to_rgb "$gnohj_color05")"  # Audio

  export LS_COLORS="di=${dir_color}:ln=${link_color}:ex=${exec_color}:*.tar=${archive_color}:*.tgz=${archive_color}:*.zip=${archive_color}:*.gz=${archive_color}:*.bz2=${archive_color}:*.jpg=${media_color}:*.jpeg=${media_color}:*.png=${media_color}:*.gif=${media_color}:*.svg=${media_color}:*.mp4=${media_color}:*.mkv=${media_color}:*.webm=${media_color}:*.mp3=${audio_color}:*.flac=${audio_color}:*.wav=${audio_color}:*.ogg=${audio_color}"
}

# Call it after colorscheme loads
generate_ls_colors

# Generate EZA_COLORS from active colorscheme for eza file listing
generate_eza_colors() {
  # Use active colorscheme variables
  # Format: eza uses simplified color codes (di=directories, ln=symlinks, etc.)
  # We'll use the ANSI color codes that match our theme
  export EZA_COLORS="\
di=$gnohj_color04:\
ln=$gnohj_color03:\
ex=$gnohj_color02:\
*.tar=$gnohj_color11:\
*.tgz=$gnohj_color11:\
*.zip=$gnohj_color11:\
*.gz=$gnohj_color11:\
*.bz2=$gnohj_color11:\
*.jpg=$gnohj_color01:\
*.jpeg=$gnohj_color01:\
*.png=$gnohj_color01:\
*.gif=$gnohj_color01:\
*.svg=$gnohj_color01:\
*.mp4=$gnohj_color01:\
*.mkv=$gnohj_color01:\
*.webm=$gnohj_color01:\
*.mp3=$gnohj_color05:\
*.flac=$gnohj_color05:\
*.wav=$gnohj_color05:\
*.ogg=$gnohj_color05"
}

# Call it after colorscheme loads
generate_eza_colors

# Adds color to fzf- for commands not tab, ex: ctrl + r
export FZF_DEFAULT_OPTS="--gutter=' ' --color=bg+:$gnohj_color13,border:$gnohj_color03,fg:$gnohj_color02,fg+:$gnohj_color02,hl+:$gnohj_color04,info:$gnohj_color09,prompt:$gnohj_color04,pointer:$gnohj_color04,marker:$gnohj_color04,header:$gnohj_color09,list-border:6,input-border:3,preview-border:-1,header-bg:-1,header-border:6"
# export FZF_DEFAULT_OPTS="--color=bg+:$gnohj_color16,gutter:-1,border:$gnohj_color03,fg:$gnohj_color02,fg+:$gnohj_color14,hl+:$gnohj_color04,info:$gnohj_color09,prompt:$gnohj_color04,pointer:$gnohj_color04,marker:$gnohj_color04,header:$gnohj_color09,list-border:6,input-border:3,preview-border:4,header-bg:-1,header-border:6 --bind 'J:preview-down,K:preview-up,alt-j:down,alt-k:up,alt-d:delete-char'"

# Eslint flat config
export ESLINT_USE_FLAT_CONFIG=false

# Global Reload Prompt Fn (updated to use the helper function)
reload_prompt() {
  reload

  if typeset -f update_rc >/dev/null 2>&1; then
    update_rc
  fi

  # check for outdated brew packages
  outdated
}

export _ZO_DATA_DIR="$ZDOTDIR"


#-------------------------------------------------------------------------------
#                  Mise Activation (must be before tool integrations)
#-------------------------------------------------------------------------------

eval "$(/Users/gnohj/.local/bin/mise activate zsh)"

# -----------------------------  Sketchybar Mise Notification
# Setup sketchybar mise notification (must be AFTER mise activate to override mise's function)
if command -v sketchybar &>/dev/null; then
    sketchybar --add event mise_update 2>/dev/null
    sketchybar --subscribe widgets.mise_notification mise_update 2>/dev/null
    function mise() {
        command mise "$@"
        local exit_code=$?
        # Only trigger on specific commands that actually change state
        case "$1" in
            install|uninstall|upgrade|use|list)
                sketchybar --trigger mise_update 2>/dev/null &
                ;;
        esac
        return $exit_code
    }
fi

# -----------------------------  Fastfetch
# INFO: kitty is needed to render custom images via `kitty-icat`; arch -arm64 brew install kitty
# Add a flag to control fastfetch execution
if [[ -z "$TMUX" && "$SHLVL" -eq 1 ]]; then
    fastfetch
fi

#-------------------------------------------------------------------------------
#                  Eval Integrations
#-------------------------------------------------------------------------------

eval $(thefuck --alias fk)
# eval "$(fastly --completion-script-zsh)"  # fastly CLI not installed
eval "$(fzf --zsh)"
eval "$(saml2aws --completion-script-zsh)"

eval "$(zoxide init zsh)"
eval "$(atuin init zsh --disable-up-arrow)"

##  Hack: Get Autin global search (ctrl+r) working; while keeping up/down arrow history search and history substring search
bindkey '^R' _atuin_search_widget
function ensure_atuin_ctrl_r() {
  local current_binding=$(bindkey | grep '\^R' | awk '{print $2}')
  if [[ "$current_binding" != "_atuin_search_widget" ]]; then
    bindkey '^R' _atuin_search_widget
  fi
}

# Add hook to check and restore Atuin binding before each prompt
autoload -Uz add-zsh-hook
add-zsh-hook precmd ensure_atuin_ctrl_r

bindkey -M viins '^R' _atuin_search_widget  # Insert mode
bindkey -M vicmd '^R' _atuin_search_widget  # Normal mode
bindkey -M emacs '^R' _atuin_search_widget  # Emacs mode (fallback)

# AWS CLI v2 Completions
# The OMZP::aws plugin only provides utilities, not completions
# Using the official AWS completer with bash compatibility layer
if [[ -x /usr/local/bin/aws_completer ]]; then
  autoload -Uz bashcompinit && bashcompinit
  complete -C /usr/local/bin/aws_completer aws
fi
