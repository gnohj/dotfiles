if vim.g.vscode then
	return {}
end

-- This allows me to create my custom snippets
-- All you need to do, if using the lazyvim.org distro, is to enable the
-- coding.luasnip LazyExtra and then add this file
return {
	-- 	"L3MON4D3/LuaSnip",
	-- 	enabled = false,
	-- 	opts = function(_, opts)
	-- 		local ls = require("luasnip")
	--
	-- 		-- Add prefix ";" to each one of my snippets using the extend_decorator
	-- 		-- I use this in combination with blink.cmp. This way I don't have to use
	-- 		-- the transform_items function in blink.cmp that removes the ";" at the
	-- 		-- beginning of each snippet. I added this because snippets that start with
	-- 		-- a symbol like ```bash aren't having their ";" removed
	-- 		-- https://github.com/L3MON4D3/LuaSnip/discussions/895
	-- 		-- NOTE: THis extend_decorator works great, but I also tried to add the ";"
	-- 		-- prefix to all of the snippets loaded from friendly-snippets, but I was
	-- 		-- unable to do so, so I still have to use the transform_items in blink.cmp
	-- 		local extend_decorator = require("luasnip.util.extend_decorator")
	-- 		-- Create trigger transformation function
	-- 		local function auto_semicolon(context)
	-- 			if type(context) == "string" then
	-- 				return { trig = ";" .. context }
	-- 			end
	-- 			return vim.tbl_extend("keep", { trig = ";" .. context.trig }, context)
	-- 		end
	-- 		-- Register and apply decorator properly
	-- 		extend_decorator.register(ls.s, {
	-- 			arg_indx = 1,
	-- 			extend = function(original)
	-- 				return auto_semicolon(original)
	-- 			end,
	-- 		})
	-- 		local s = extend_decorator.apply(ls.s, {})
	--
	-- 		-- local s = ls.snippet
	-- 		local t = ls.text_node
	-- 		local i = ls.insert_node
	-- 		local f = ls.function_node
	--
	-- 		local function clipboard()
	-- 			return vim.fn.getreg("+")
	-- 		end
	--
	-- 		-- #####################################################################
	-- 		--                            Markdown
	-- 		-- #####################################################################
	--
	-- 		-- Helper function to create code block snippets
	-- 		local function create_code_block_snippet(lang)
	-- 			return s({
	-- 				trig = lang,
	-- 				name = "Codeblock",
	-- 				desc = lang .. " codeblock",
	-- 			}, {
	-- 				t({ "```" .. lang, "" }),
	-- 				i(1),
	-- 				t({ "", "```" }),
	-- 			})
	-- 		end
	--
	-- 		-- Define languages for code blocks
	-- 		local languages = {
	-- 			"txt",
	-- 			"lua",
	-- 			"sql",
	-- 			"go",
	-- 			"regex",
	-- 			"bash",
	-- 			"markdown",
	-- 			"markdown_inline",
	-- 			"yaml",
	-- 			"yml",
	-- 			"vim",
	-- 			"nvim",
	-- 			"neovim",
	-- 			"json",
	-- 			"jsonc",
	-- 			"cpp",
	-- 			"csv",
	-- 			"java",
	-- 			"javascript",
	-- 			"toml",
	-- 			"typescript",
	-- 			"python",
	-- 			"dockerfile",
	-- 			"html",
	-- 			"css",
	-- 			"templ",
	-- 			"php",
	-- 		}
	--
	-- 		-- Generate snippets for all languages
	-- 		local snippets = {}
	--
	-- 		for _, lang in ipairs(languages) do
	-- 			table.insert(snippets, create_code_block_snippet(lang))
	-- 		end
	--
	-- 		table.insert(
	-- 			snippets,
	-- 			s({
	-- 				trig = "linkt",
	-- 				name = 'Add this -> [](){:target="_blank"}',
	-- 				desc = 'Add this -> [](){:target="_blank"}',
	-- 			}, {
	-- 				t("["),
	-- 				i(1),
	-- 				t("]("),
	-- 				i(2),
	-- 				t('){:target="_blank"}'),
	-- 			})
	-- 		)
	--
	-- 		table.insert(
	-- 			snippets,
	-- 			s({
	-- 				trig = "todo",
	-- 				name = "Add TODO: item",
	-- 				desc = "Add TODO: item",
	-- 			}, {
	-- 				t("<!-- TODO: "),
	-- 				i(1),
	-- 				t(" -->"),
	-- 			})
	-- 		)
	--
	-- 		-- Paste clipboard contents in link section, move cursor to ()
	-- 		table.insert(
	-- 			snippets,
	-- 			s({
	-- 				trig = "linkc",
	-- 				name = "Paste clipboard as .md link",
	-- 				desc = "Paste clipboard as .md link",
	-- 			}, {
	-- 				t("["),
	-- 				i(1),
	-- 				t("]("),
	-- 				f(clipboard, {}),
	-- 				t(")"),
	-- 			})
	-- 		)
	--
	-- 		-- Paste clipboard contents in link section, move cursor to ()
	-- 		table.insert(
	-- 			snippets,
	-- 			s({
	-- 				trig = "linkex",
	-- 				name = "Paste clipboard as EXT .md link",
	-- 				desc = "Paste clipboard as EXT .md link",
	-- 			}, {
	-- 				t("["),
	-- 				i(1),
	-- 				t("]("),
	-- 				f(clipboard, {}),
	-- 				t('){:target="_blank"}'),
	-- 			})
	-- 		)
	--
	-- 		-- Basic bash script template
	-- 		table.insert(
	-- 			snippets,
	-- 			s({
	-- 				trig = "bashex",
	-- 				name = "Basic bash script example",
	-- 				desc = "Simple bash script template",
	-- 			}, {
	-- 				t({
	-- 					"```bash",
	-- 					"#!/bin/bash",
	-- 					"",
	-- 					"echo 'helix'",
	-- 					"echo 'deeznuts'",
	-- 					"```",
	-- 					"",
	-- 				}),
	-- 			})
	-- 		)
	--
	-- 		table.insert(
	-- 			snippets,
	-- 			s({
	-- 				trig = "prettierignore",
	-- 				name = "Add prettier ignore start and end headings",
	-- 				desc = "Add prettier ignore start and end headings",
	-- 			}, {
	-- 				t({
	-- 					" ",
	-- 					"<!-- prettier-ignore-start -->",
	-- 					" ",
	-- 					"> ",
	-- 				}),
	-- 				i(1),
	-- 				t({
	-- 					" ",
	-- 					" ",
	-- 					"<!-- prettier-ignore-end -->",
	-- 				}),
	-- 			})
	-- 		)
	--
	-- 		ls.add_snippets("markdown", snippets)
	--
	-- 		return opts
	-- 	end,
}
